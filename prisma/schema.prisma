// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "darwin-arm64"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  sub       String   @unique
  email     String   @unique
  name      String
  photoUrl  String?
  createdAt DateTime @default(now())

  followingIds String[] @db.ObjectId
  following    User[]   @relation(fields: [followingIds], references: [id], "UserFollowsUser")

  followerIds String[] @db.ObjectId
  followers   User[]   @relation(fields: [followerIds], references: [id], "UserFollowsUser")

  lists List[] @relation("UserOwnsList")

  savedListIds String[] @db.ObjectId
  savedLists   List[]   @relation(fields: [savedListIds], references: [id], "UserSavesList")
}

model List {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  cover       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  movieIds String[] @db.ObjectId
  movies   Movie[]  @relation(fields: [movieIds], references: [id], "ListContainsMovie")

  recommendationIds        String[]  @db.ObjectId
  recommendations          Movie[]   @relation(fields: [recommendationIds], references: [id], "MovieIsRecommendedForList")

  ownerId String @db.ObjectId
  owner   User   @relation(name: "UserOwnsList", fields: [ownerId], references: [id])

  savedByIds String[] @db.ObjectId
  savedBy    User[]   @relation(fields: [savedByIds], references: [id], "UserSavesList")
}

model Movie {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  tmdbId      Int      @unique
  imdbId      String?  @unique
  title       String
  description String?
  poster      String?
  year        Int?
  countries   String[]
  genres      String[]
  directors   String[]
  writers     String[]
  stars       String[]
  rating      Float?
  trailerUrl  String?

  listIds String[] @db.ObjectId
  lists   List[]   @relation(fields: [listIds], references: [id], "ListContainsMovie")

  recommendedForListIds String[] @db.ObjectId
  recommendedForLists   List[]   @relation(fields: [recommendedForListIds], references: [id], "MovieIsRecommendedForList")
}
